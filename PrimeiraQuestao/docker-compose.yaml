version: "3.8"

services:

  nfs-server:
    image: erichough/nfs-server
    container_name: nfs-server
    privileged: true
    environment:
      - NFS_EXPORT_0=/data *(rw,sync,no_root_squash,no_subtree_check)
    volumes:

      - efs-vol:/data
    ports:
      - "2049:2049"
    command: >
      sh -c "
        mkdir -p /data &&
        chmod 777 /data &&
        /usr/bin/supervisord -c /etc/supervisord.conf
      "
  

  #  localstack:
  #    image: localstack/localstack:latest
  #    container_name: localstack
  #    environment:
  #      - DEBUG=1
  #      - SERVICES=s3,cloudformation,lambda,iam
  #      - EDGE_PORT=4566
  #      - AWS_DEFAULT_REGION=us-east-1
  #      - DOCKER_HOST=unix:///var/run/docker.sock
  #    ports:
  #      - "4566:4566"
  #      - "4510-4559:4510-4559"


  backup-runner:
    image: python:3.11-slim
    container_name: backup-runner

    privileged: true
    depends_on:
      - nfs-server

    volumes:
      - ./generate_test_files.py:/usr/local/bin/generate_test_files.py:rw
      - ./manage_backups.py:/usr/local/bin/manage_backups.py:rw
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

    entrypoint: >
      bash -c "
        set -euo pipefail;
      
        # 1) Atualiza índices e instala nfs-common no contêiner
        apt-get update -qq && apt-get install -y --no-install-recommends nfs-common;
      
        # 2) Cria e monta o volume NFS
        mkdir -p /mnt/efs-simulada;
        mount -t nfs -o nfsvers=4 nfs-server:/data /mnt/efs-simulada;
        chmod -R 777 /mnt/efs-simulada;
      
        # 3) Executa os scripts Python (já que a imagem python:3.11-slim tem o Python instalado)
        python /usr/local/bin/generate_test_files.py;
        python /usr/local/bin/manage_backups.py;
      
        # 4) Mantém o contêiner vivo por 40s para inspeção (opcional)
        sleep 120;
      "

volumes:
  efs-vol:
    driver: local
